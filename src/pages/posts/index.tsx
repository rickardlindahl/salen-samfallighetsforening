import type { GetServerSideProps, NextPage } from "next";
import { unstable_getServerSession as getServerSession } from "next-auth";
import Head from "next/head";
import Link from "next/link";
import { trpc } from "../../utils/trpc";
import { authOptions } from "../api/auth/[...nextauth]";

const Posts: NextPage = () => {
  const { data: posts, error, isLoading } = trpc.useQuery(["posts.getPosts"]);

  return (
    <>
      <Head>
        <title>Inlägg</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex flex-col overflow-visible p-4">
        <h1 className="font-xl font-bold">Inlägg</h1>
        {isLoading && <p>Laddar inlägg...</p>}
        {error && <div>Något gick fel...</div>}
        {posts && (
          <>
            {posts.map((p) => (
              <div key={p.id} className="mb-4">
                <div className="text-lg font-bold">{p.title}</div>
                <div>
                  {p.createdAt.toISOString().split("T")[0]} {p.user.name}
                </div>
                <div>{p.body}</div>
              </div>
            ))}
          </>
        )}
        <Link href="/posts/create">
          <a className="btn">Skapa nytt inlägg</a>
        </Link>
      </main>
    </>
  );
};

export default Posts;

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getServerSession(context.req, context.res, authOptions);

  if (!session) {
    return {
      redirect: {
        statusCode: 307,
        destination: "/auth/signin",
      },
    };
  }

  return {
    props: {
      session,
    },
  };
};
